// class Solution {
//     public double myPow(double x, int n) {
//         if (n == 0) {
//             return 1.0;
//         }
//         double temp = myPow(x, n / 2);

//         if (n % 2 == 0) {
//             return temp * temp;
//         } else {
//             if (n > 0) {
//                 return x * temp * temp;
//             } else {
//                 return (temp * temp) / x;
//             }
//         }
//     }
// }




class Solution {
    public double myPow(double x, int n) {
        long N=n;
        if(n<0){
            x=1/x;
            N=-N;
        }

        return helper(x,N);
    }

    public double helper(double x,long n){
        if(n==0)return 1;

        if(n%2==0){
            return helper(x*x,n/2);
        }
        else{
            return x*helper(x,n-1);
        }
    }
}



// class Solution {
//     public double myPow(double x, int n) {
//         long N=n;
//         double ans=1;

//         if(n<0){
//             x=1/x;
//             N=-N;
//         }
        
//         while(N>0){
//             if(N%2==1){
//                 ans*=x;
//             }

//             x=x*x;
//             N/=2;
//         }

//         return ans;
//     }
// }





// class Solution {
//     public double myPow(double x, int n) {
//         if(x<0){
//             if(n%2==0){
//                 return Math.exp(Math.log(-x)*n);
//             }
//             else{
//                 return -Math.exp(Math.log(-x)*n);
//             }
//         }

//         double logx=Math.log(x);
//         double nlogx=logx*n;
//         double antlog=Math.exp(nlogx);

//         return antlog;
//     }
// }
